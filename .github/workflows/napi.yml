name: Node.js
on:
  push:
    branches:
      - main
    tags:
      - "**"

  pull_request:
    branches:
      - "**"

env:
  DEBUG: napi:*
  APP_NAME: chia-wallet-sdk
  MACOSX_DEPLOYMENT_TARGET: "10.13"

permissions:
  contents: write
  id-token: write

jobs:
  build:
    defaults:
      run:
        working-directory: ./napi
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build:macos-x64
          - host: windows-latest
            build: pnpm build:windows-x64
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: pnpm build:linux-x64
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: pnpm build:linux-arm64
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build:macos-arm64
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install dependencies
        run: pnpm install

      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml
          architecture: x86

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/napi"
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: napi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-bindings:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    defaults:
      run:
        working-directory: ./napi
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x64
          - host: linux-arm64
            target: aarch64-unknown-linux-gnu
            arch: arm64
        node:
          - "18"
          - "20"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml
          architecture: ${{ matrix.settings.arch }}

      - name: Install dependencies
        run: pnpm install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: napi

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: pnpm test

  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    defaults:
      run:
        working-directory: ./napi
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: napi/artifacts

      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: napi/artifacts

      - name: Combine binaries
        run: pnpm universal

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: napi/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-bindings
      - universal-macOS
    defaults:
      run:
        working-directory: ./napi
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: napi/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: napi/artifacts

      - name: Move artifacts
        run: pnpm artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        if: startsWith(github.event.ref, 'refs/tags')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
