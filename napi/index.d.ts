/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function encodeOffer(spendBundle: SpendBundle): string
export declare function decodeOffer(offer: string): SpendBundle
export declare function standardPuzzleHash(syntheticKey: PublicKey): Uint8Array
export declare function catPuzzleHash(assetId: Uint8Array, innerPuzzleHash: Uint8Array): Uint8Array
export declare function fromHex(value: string): Uint8Array
export declare function toHex(value: Uint8Array): string
export declare function bytesEqual(lhs: Uint8Array, rhs: Uint8Array): boolean
export declare function treeHashAtom(atom: Uint8Array): Uint8Array
export declare function treeHashPair(first: Uint8Array, rest: Uint8Array): Uint8Array
export declare function sha256(value: Uint8Array): Uint8Array
export declare function curryTreeHash(program: Uint8Array, args: Array<Uint8Array>): Uint8Array
export declare function generateBytes(bytes: number): Uint8Array
export declare function mOfNHash(config: MemberConfig, required: number, items: Array<Uint8Array>): Uint8Array
export declare function k1MemberHash(config: MemberConfig, publicKey: K1PublicKey, fastForward: boolean): Uint8Array
export declare function r1MemberHash(config: MemberConfig, publicKey: R1PublicKey, fastForward: boolean): Uint8Array
export declare function blsMemberHash(config: MemberConfig, publicKey: PublicKey): Uint8Array
export declare function passkeyMemberHash(config: MemberConfig, publicKey: R1PublicKey, fastForward: boolean): Uint8Array
export declare function singletonMemberHash(config: MemberConfig, launcherId: Uint8Array): Uint8Array
export declare function fixedMemberHash(config: MemberConfig, fixedPuzzleHash: Uint8Array): Uint8Array
export declare function customMemberHash(config: MemberConfig, innerHash: Uint8Array): Uint8Array
export const enum RestrictionKind {
  MemberCondition = 0,
  DelegatedPuzzleHash = 1,
  DelegatedPuzzleWrapper = 2
}
export declare function timelockRestriction(timelock: bigint): Restriction
export declare function force1Of2Restriction(leftSideSubtreeHash: Uint8Array, nonce: number, memberValidatorListHash: Uint8Array, delegatedPuzzleValidatorListHash: Uint8Array): Restriction
export declare function preventConditionOpcodeRestriction(conditionOpcode: number): Restriction
export declare function preventMultipleCreateCoinsRestriction(): Restriction
export declare function preventVaultSideEffectsRestriction(): Array<Restriction>
export declare function wrappedDelegatedPuzzleHash(restrictions: Array<Restriction>, delegatedPuzzleHash: Uint8Array): Uint8Array
export declare class Address {
  encode(): string
  static decode(address: string): Address
  constructor(puzzleHash: Uint8Array, prefix: string)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get prefix(): string
  set prefix(value: string)
}
export declare class SecretKey {
  static fromSeed(seed: Uint8Array): SecretKey
  static fromBytes(bytes: Uint8Array): SecretKey
  toBytes(): Uint8Array
  publicKey(): PublicKey
  sign(message: Uint8Array): Signature
  deriveUnhardened(index: number): SecretKey
  deriveHardened(index: number): SecretKey
  deriveUnhardenedPath(path: Array<number>): SecretKey
  deriveHardenedPath(path: Array<number>): SecretKey
  deriveSynthetic(): SecretKey
  deriveSyntheticHidden(hiddenPuzzleHash: Uint8Array): SecretKey
}
export declare class PublicKey {
  static infinity(): PublicKey
  static aggregate(publicKeys: Array<PublicKey>): PublicKey
  static fromBytes(bytes: Uint8Array): PublicKey
  toBytes(): Uint8Array
  fingerprint(): number
  isInfinity(): boolean
  isValid(): boolean
  deriveUnhardened(index: number): PublicKey
  deriveUnhardenedPath(path: Array<number>): PublicKey
  deriveSynthetic(): PublicKey
  deriveSyntheticHidden(hiddenPuzzleHash: Uint8Array): PublicKey
}
export declare class Signature {
  static infinity(): Signature
  static aggregate(signatures: Array<Signature>): Signature
  static fromBytes(bytes: Uint8Array): Signature
  toBytes(): Uint8Array
  isInfinity(): boolean
  isValid(): boolean
}
export declare class Clvm {
  constructor()
  addCoinSpend(coinSpend: CoinSpend): void
  spendCoin(coin: Coin, spend: Spend): void
  coinSpends(): Array<CoinSpend>
  parse(program: string): Program
  deserialize(value: Uint8Array): Program
  deserializeWithBackrefs(value: Uint8Array): Program
  cache(modHash: Uint8Array, value: Uint8Array): Program
  pair(first: Program, rest: Program): Program
  nil(): Program
  int(value: bigint): Program
  string(value: string): Program
  bool(value: boolean): Program
  atom(value: Uint8Array): Program
  list(value: Array<Program>): Program
  delegatedSpend(conditions: Array<Program>): Spend
  standardSpend(syntheticKey: PublicKey, spend: Spend): Spend
  spendStandardCoin(coin: Coin, syntheticKey: PublicKey, spend: Spend): void
  spendCatCoins(catSpends: Array<CatSpend>): void
  mintNfts(parentCoinId: Uint8Array, nftMints: Array<NftMint>): MintedNfts
  spendNft(nft: Nft, innerSpend: Spend): void
  spendDid(did: Did, innerSpend: Spend): void
  spendStreamedCat(streamedCat: StreamedCat, paymentTime: bigint, clawback: boolean): void
  mintVault(parentCoinId: Uint8Array, custodyHash: Uint8Array, memos: Program): VaultMint
  mipsSpend(coin: Coin, delegatedSpend: Spend): MipsSpend
  nftMetadata(value: NftMetadata): Program
  remark(rest: Program): Program
  aggSigParent(publicKey: PublicKey, message: Uint8Array): Program
  aggSigPuzzle(publicKey: PublicKey, message: Uint8Array): Program
  aggSigAmount(publicKey: PublicKey, message: Uint8Array): Program
  aggSigPuzzleAmount(publicKey: PublicKey, message: Uint8Array): Program
  aggSigParentAmount(publicKey: PublicKey, message: Uint8Array): Program
  aggSigParentPuzzle(publicKey: PublicKey, message: Uint8Array): Program
  aggSigUnsafe(publicKey: PublicKey, message: Uint8Array): Program
  aggSigMe(publicKey: PublicKey, message: Uint8Array): Program
  createCoin(puzzleHash: Uint8Array, amount: bigint, memos?: Program | undefined | null): Program
  reserveFee(amount: bigint): Program
  createCoinAnnouncement(message: Uint8Array): Program
  createPuzzleAnnouncement(message: Uint8Array): Program
  assertCoinAnnouncement(announcementId: Uint8Array): Program
  assertPuzzleAnnouncement(announcementId: Uint8Array): Program
  assertConcurrentSpend(coinId: Uint8Array): Program
  assertConcurrentPuzzle(puzzleHash: Uint8Array): Program
  assertSecondsRelative(seconds: bigint): Program
  assertSecondsAbsolute(seconds: bigint): Program
  assertHeightRelative(height: number): Program
  assertHeightAbsolute(height: number): Program
  assertBeforeSecondsRelative(seconds: bigint): Program
  assertBeforeSecondsAbsolute(seconds: bigint): Program
  assertBeforeHeightRelative(height: number): Program
  assertBeforeHeightAbsolute(height: number): Program
  assertMyCoinId(coinId: Uint8Array): Program
  assertMyParentId(parentId: Uint8Array): Program
  assertMyPuzzleHash(puzzleHash: Uint8Array): Program
  assertMyAmount(amount: bigint): Program
  assertMyBirthSeconds(seconds: bigint): Program
  assertMyBirthHeight(height: number): Program
  assertEphemeral(): Program
  sendMessage(mode: number, message: Uint8Array, data: Array<Program>): Program
  receiveMessage(mode: number, message: Uint8Array, data: Array<Program>): Program
  softfork(cost: bigint, rest: Program): Program
  alloc(value: any): Program
  boundCheckedNumber(value: number): Program
}
export declare class Output {
  constructor(value: Program, cost: bigint)
  get value(): Program
  set value(value: Program)
  get cost(): bigint
  set cost(value: bigint)
}
export declare class Pair {
  constructor(first: Program, rest: Program)
  get first(): Program
  set first(value: Program)
  get rest(): Program
  set rest(value: Program)
}
export declare class CurriedProgram {
  constructor(program: Program, args: Array<Program>)
  get program(): Program
  set program(value: Program)
  get args(): Array<Program>
  set args(value: Array<Program>)
}
export declare class LineageProof {
  constructor(parentParentCoinInfo: Uint8Array, parentInnerPuzzleHash: Uint8Array | undefined | null, parentAmount: bigint)
  get parentParentCoinInfo(): Uint8Array
  set parentParentCoinInfo(value: Uint8Array)
  get parentInnerPuzzleHash(): Uint8Array | null
  set parentInnerPuzzleHash(value?: Uint8Array | undefined | null)
  get parentAmount(): bigint
  set parentAmount(value: bigint)
}
export declare class Coin {
  coinId(): Uint8Array
  constructor(parentCoinInfo: Uint8Array, puzzleHash: Uint8Array, amount: bigint)
  get parentCoinInfo(): Uint8Array
  set parentCoinInfo(value: Uint8Array)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get amount(): bigint
  set amount(value: bigint)
}
export declare class CoinSpend {
  constructor(coin: Coin, puzzleReveal: Uint8Array, solution: Uint8Array)
  get coin(): Coin
  set coin(value: Coin)
  get puzzleReveal(): Uint8Array
  set puzzleReveal(value: Uint8Array)
  get solution(): Uint8Array
  set solution(value: Uint8Array)
}
export declare class SpendBundle {
  toBytes(): Uint8Array
  static fromBytes(bytes: Uint8Array): SpendBundle
  hash(): Uint8Array
  constructor(coinSpends: Array<CoinSpend>, aggregatedSignature: Signature)
  get coinSpends(): Array<CoinSpend>
  set coinSpends(value: Array<CoinSpend>)
  get aggregatedSignature(): Signature
  set aggregatedSignature(value: Signature)
}
export declare class Spend {
  constructor(puzzle: Program, solution: Program)
  get puzzle(): Program
  set puzzle(value: Program)
  get solution(): Program
  set solution(value: Program)
}
export declare class CoinsetClient {
  constructor(baseUrl: string)
  static testnet11(): CoinsetClient
  static mainnet(): CoinsetClient
  getBlockchainState(): Promise<BlockchainStateResponse>
  getAdditionsAndRemovals(headerHash: Uint8Array): Promise<AdditionsAndRemovalsResponse>
  getBlock(headerHash: Uint8Array): Promise<GetBlockResponse>
  getBlockRecord(headerHash: Uint8Array): Promise<GetBlockRecordResponse>
  getBlockRecordByHeight(height: number): Promise<GetBlockRecordResponse>
  getBlockRecords(startHeight: number, endHeight: number): Promise<GetBlockRecordsResponse>
  getBlocks(start: number, end: number, excludeHeaderHash: boolean, excludeReorged: boolean): Promise<GetBlocksResponse>
  getBlockSpends(headerHash: Uint8Array): Promise<GetBlockSpendsResponse>
  getCoinRecordByName(name: Uint8Array): Promise<GetCoinRecordResponse>
  getCoinRecordsByHint(hint: Uint8Array, startHeight?: number | undefined | null, endHeight?: number | undefined | null, includeSpentCoins?: boolean | undefined | null): Promise<GetCoinRecordsResponse>
  getCoinRecordsByNames(names: Array<Uint8Array>, startHeight?: number | undefined | null, endHeight?: number | undefined | null, includeSpentCoins?: boolean | undefined | null): Promise<GetCoinRecordsResponse>
  getCoinRecordsByParentIds(parentIds: Array<Uint8Array>, startHeight?: number | undefined | null, endHeight?: number | undefined | null, includeSpentCoins?: boolean | undefined | null): Promise<GetCoinRecordsResponse>
  getCoinRecordsByPuzzleHash(puzzleHash: Uint8Array, startHeight?: number | undefined | null, endHeight?: number | undefined | null, includeSpentCoins?: boolean | undefined | null): Promise<GetCoinRecordsResponse>
  getCoinRecordsByPuzzleHashes(puzzleHashes: Array<Uint8Array>, startHeight?: number | undefined | null, endHeight?: number | undefined | null, includeSpentCoins?: boolean | undefined | null): Promise<GetCoinRecordsResponse>
  getPuzzleAndSolution(coinId: Uint8Array, height?: number | undefined | null): Promise<GetPuzzleAndSolutionResponse>
  pushTx(spendBundle: SpendBundle): Promise<PushTxResponse>
  getNetworkInfo(): Promise<GetNetworkInfoResponse>
  getMempoolItemByTxId(txId: Uint8Array): Promise<GetMempoolItemResponse>
  getMempoolItemsByCoinName(coinName: Uint8Array): Promise<GetMempoolItemsResponse>
}
export declare class BlockchainStateResponse {
  constructor(blockchainState: BlockchainState | undefined | null, error: string | undefined | null, success: boolean)
  get blockchainState(): BlockchainState | null
  set blockchainState(value?: BlockchainState | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class BlockchainState {
  constructor(averageBlockTime: bigint, blockMaxCost: bigint, difficulty: bigint, genesisChallengeInitialized: boolean, mempoolCost: bigint, mempoolFees: bigint, mempoolMaxTotalCost: bigint, mempoolMinFees: MempoolMinFees, mempoolSize: number, nodeId: Uint8Array, peak: BlockRecord, space: bigint, subSlotIters: bigint, sync: SyncState)
  get averageBlockTime(): bigint
  set averageBlockTime(value: bigint)
  get blockMaxCost(): bigint
  set blockMaxCost(value: bigint)
  get difficulty(): bigint
  set difficulty(value: bigint)
  get genesisChallengeInitialized(): boolean
  set genesisChallengeInitialized(value: boolean)
  get mempoolCost(): bigint
  set mempoolCost(value: bigint)
  get mempoolFees(): bigint
  set mempoolFees(value: bigint)
  get mempoolMaxTotalCost(): bigint
  set mempoolMaxTotalCost(value: bigint)
  get mempoolMinFees(): MempoolMinFees
  set mempoolMinFees(value: MempoolMinFees)
  get mempoolSize(): number
  set mempoolSize(value: number)
  get nodeId(): Uint8Array
  set nodeId(value: Uint8Array)
  get peak(): BlockRecord
  set peak(value: BlockRecord)
  get space(): bigint
  set space(value: bigint)
  get subSlotIters(): bigint
  set subSlotIters(value: bigint)
  get sync(): SyncState
  set sync(value: SyncState)
}
export declare class MempoolMinFees {
  constructor(cost5000000: bigint)
  get cost5000000(): bigint
  set cost5000000(value: bigint)
}
export declare class SyncState {
  constructor(syncMode: boolean, syncProgressHeight: number, syncTipHeight: number, synced: boolean)
  get syncMode(): boolean
  set syncMode(value: boolean)
  get syncProgressHeight(): number
  set syncProgressHeight(value: number)
  get syncTipHeight(): number
  set syncTipHeight(value: number)
  get synced(): boolean
  set synced(value: boolean)
}
export declare class AdditionsAndRemovalsResponse {
  constructor(additions: Array<CoinRecord> | undefined | null, removals: Array<CoinRecord> | undefined | null, error: string | undefined | null, success: boolean)
  get additions(): Array<CoinRecord> | null
  set additions(value?: Array<CoinRecord> | undefined | null)
  get removals(): Array<CoinRecord> | null
  set removals(value?: Array<CoinRecord> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetBlockResponse {
  constructor(block: FullBlock | undefined | null, error: string | undefined | null, success: boolean)
  get block(): FullBlock | null
  set block(value?: FullBlock | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetBlockRecordResponse {
  constructor(blockRecord: BlockRecord | undefined | null, error: string | undefined | null, success: boolean)
  get blockRecord(): BlockRecord | null
  set blockRecord(value?: BlockRecord | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetBlockRecordsResponse {
  constructor(blockRecords: Array<BlockRecord> | undefined | null, error: string | undefined | null, success: boolean)
  get blockRecords(): Array<BlockRecord> | null
  set blockRecords(value?: Array<BlockRecord> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetBlocksResponse {
  constructor(blocks: Array<FullBlock> | undefined | null, error: string | undefined | null, success: boolean)
  get blocks(): Array<FullBlock> | null
  set blocks(value?: Array<FullBlock> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetBlockSpendsResponse {
  constructor(blockSpends: Array<CoinSpend> | undefined | null, error: string | undefined | null, success: boolean)
  get blockSpends(): Array<CoinSpend> | null
  set blockSpends(value?: Array<CoinSpend> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetCoinRecordResponse {
  constructor(coinRecord: CoinRecord | undefined | null, error: string | undefined | null, success: boolean)
  get coinRecord(): CoinRecord | null
  set coinRecord(value?: CoinRecord | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetCoinRecordsResponse {
  constructor(coinRecords: Array<CoinRecord> | undefined | null, error: string | undefined | null, success: boolean)
  get coinRecords(): Array<CoinRecord> | null
  set coinRecords(value?: Array<CoinRecord> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetPuzzleAndSolutionResponse {
  constructor(coinSolution: CoinSpend | undefined | null, error: string | undefined | null, success: boolean)
  get coinSolution(): CoinSpend | null
  set coinSolution(value?: CoinSpend | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class PushTxResponse {
  constructor(status: string, error: string | undefined | null, success: boolean)
  get status(): string
  set status(value: string)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetNetworkInfoResponse {
  constructor(networkName: string | undefined | null, networkPrefix: string | undefined | null, genesisChallenge: Uint8Array | undefined | null, error: string | undefined | null, success: boolean)
  get networkName(): string | null
  set networkName(value?: string | undefined | null)
  get networkPrefix(): string | null
  set networkPrefix(value?: string | undefined | null)
  get genesisChallenge(): Uint8Array | null
  set genesisChallenge(value?: Uint8Array | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetMempoolItemResponse {
  constructor(mempoolItem: MempoolItem | undefined | null, error: string | undefined | null, success: boolean)
  get mempoolItem(): MempoolItem | null
  set mempoolItem(value?: MempoolItem | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class GetMempoolItemsResponse {
  constructor(mempoolItems: Array<MempoolItem> | undefined | null, error: string | undefined | null, success: boolean)
  get mempoolItems(): Array<MempoolItem> | null
  set mempoolItems(value?: Array<MempoolItem> | undefined | null)
  get error(): string | null
  set error(value?: string | undefined | null)
  get success(): boolean
  set success(value: boolean)
}
export declare class CoinRecord {
  constructor(coin: Coin, coinbase: boolean, confirmedBlockIndex: number, spent: boolean, spentBlockIndex: number, timestamp: bigint)
  get coin(): Coin
  set coin(value: Coin)
  get coinbase(): boolean
  set coinbase(value: boolean)
  get confirmedBlockIndex(): number
  set confirmedBlockIndex(value: number)
  get spent(): boolean
  set spent(value: boolean)
  get spentBlockIndex(): number
  set spentBlockIndex(value: number)
  get timestamp(): bigint
  set timestamp(value: bigint)
}
export declare class MempoolItem {
  constructor(spendBundle: SpendBundle, fee: bigint)
  get spendBundle(): SpendBundle
  set spendBundle(value: SpendBundle)
  get fee(): bigint
  set fee(value: bigint)
}
export declare class FullBlock {
  constructor(finishedSubSlots: Array<EndOfSubSlotBundle>, rewardChainBlock: RewardChainBlock, challengeChainSpProof: VDFProof | undefined | null, challengeChainIpProof: VDFProof, rewardChainSpProof: VDFProof | undefined | null, rewardChainIpProof: VDFProof, infusedChallengeChainIpProof: VDFProof | undefined | null, foliage: Foliage, foliageTransactionBlock: FoliageTransactionBlock | undefined | null, transactionsInfo: TransactionsInfo | undefined | null, transactionsGenerator: Uint8Array | undefined | null, transactionsGeneratorRefList: Array<number>)
  get finishedSubSlots(): Array<EndOfSubSlotBundle>
  set finishedSubSlots(value: Array<EndOfSubSlotBundle>)
  get rewardChainBlock(): RewardChainBlock
  set rewardChainBlock(value: RewardChainBlock)
  get challengeChainSpProof(): VDFProof | null
  set challengeChainSpProof(value?: VDFProof | undefined | null)
  get challengeChainIpProof(): VDFProof
  set challengeChainIpProof(value: VDFProof)
  get rewardChainSpProof(): VDFProof | null
  set rewardChainSpProof(value?: VDFProof | undefined | null)
  get rewardChainIpProof(): VDFProof
  set rewardChainIpProof(value: VDFProof)
  get infusedChallengeChainIpProof(): VDFProof | null
  set infusedChallengeChainIpProof(value?: VDFProof | undefined | null)
  get foliage(): Foliage
  set foliage(value: Foliage)
  get foliageTransactionBlock(): FoliageTransactionBlock | null
  set foliageTransactionBlock(value?: FoliageTransactionBlock | undefined | null)
  get transactionsInfo(): TransactionsInfo | null
  set transactionsInfo(value?: TransactionsInfo | undefined | null)
  get transactionsGenerator(): Uint8Array | null
  set transactionsGenerator(value?: Uint8Array | undefined | null)
  get transactionsGeneratorRefList(): Array<number>
  set transactionsGeneratorRefList(value: Array<number>)
}
export declare class EndOfSubSlotBundle {
  constructor(challengeChain: ChallengeChainSubSlot, infusedChallengeChain: InfusedChallengeChainSubSlot | undefined | null, rewardChain: RewardChainSubSlot, proofs: SubSlotProofs)
  get challengeChain(): ChallengeChainSubSlot
  set challengeChain(value: ChallengeChainSubSlot)
  get infusedChallengeChain(): InfusedChallengeChainSubSlot | null
  set infusedChallengeChain(value?: InfusedChallengeChainSubSlot | undefined | null)
  get rewardChain(): RewardChainSubSlot
  set rewardChain(value: RewardChainSubSlot)
  get proofs(): SubSlotProofs
  set proofs(value: SubSlotProofs)
}
export declare class ChallengeChainSubSlot {
  constructor(challengeChainEndOfSlotVdf: VDFInfo, infusedChallengeChainSubSlotHash?: Uint8Array | undefined | null, subepochSummaryHash?: Uint8Array | undefined | null, newSubSlotIters?: bigint | undefined | null, newDifficulty?: bigint | undefined | null)
  get challengeChainEndOfSlotVdf(): VDFInfo
  set challengeChainEndOfSlotVdf(value: VDFInfo)
  get infusedChallengeChainSubSlotHash(): Uint8Array | null
  set infusedChallengeChainSubSlotHash(value?: Uint8Array | undefined | null)
  get subepochSummaryHash(): Uint8Array | null
  set subepochSummaryHash(value?: Uint8Array | undefined | null)
  get newSubSlotIters(): bigint | null
  set newSubSlotIters(value?: bigint | undefined | null)
  get newDifficulty(): bigint | null
  set newDifficulty(value?: bigint | undefined | null)
}
export declare class InfusedChallengeChainSubSlot {
  constructor(infusedChallengeChainEndOfSlotVdf: VDFInfo)
  get infusedChallengeChainEndOfSlotVdf(): VDFInfo
  set infusedChallengeChainEndOfSlotVdf(value: VDFInfo)
}
export declare class RewardChainSubSlot {
  constructor(endOfSlotVdf: VDFInfo, challengeChainSubSlotHash: Uint8Array, infusedChallengeChainSubSlotHash: Uint8Array | undefined | null, deficit: number)
  get endOfSlotVdf(): VDFInfo
  set endOfSlotVdf(value: VDFInfo)
  get challengeChainSubSlotHash(): Uint8Array
  set challengeChainSubSlotHash(value: Uint8Array)
  get infusedChallengeChainSubSlotHash(): Uint8Array | null
  set infusedChallengeChainSubSlotHash(value?: Uint8Array | undefined | null)
  get deficit(): number
  set deficit(value: number)
}
export declare class SubSlotProofs {
  constructor(challengeChainSlotProof: VDFProof, infusedChallengeChainSlotProof: VDFProof | undefined | null, rewardChainSlotProof: VDFProof)
  get challengeChainSlotProof(): VDFProof
  set challengeChainSlotProof(value: VDFProof)
  get infusedChallengeChainSlotProof(): VDFProof | null
  set infusedChallengeChainSlotProof(value?: VDFProof | undefined | null)
  get rewardChainSlotProof(): VDFProof
  set rewardChainSlotProof(value: VDFProof)
}
export type VDFInfo = VdfInfo
export declare class VdfInfo {
  constructor(challenge: Uint8Array, numberOfIterations: bigint, output: Uint8Array)
  get challenge(): Uint8Array
  set challenge(value: Uint8Array)
  get numberOfIterations(): bigint
  set numberOfIterations(value: bigint)
  get output(): Uint8Array
  set output(value: Uint8Array)
}
export type VDFProof = VdfProof
export declare class VdfProof {
  constructor(witnessType: number, witness: Uint8Array, normalizedToIdentity: boolean)
  get witnessType(): number
  set witnessType(value: number)
  get witness(): Uint8Array
  set witness(value: Uint8Array)
  get normalizedToIdentity(): boolean
  set normalizedToIdentity(value: boolean)
}
export declare class TransactionsInfo {
  constructor(generatorRoot: Uint8Array, generatorRefsRoot: Uint8Array, aggregatedSignature: Signature, fees: bigint, cost: bigint, rewardClaimsIncorporated: Array<Coin>)
  get generatorRoot(): Uint8Array
  set generatorRoot(value: Uint8Array)
  get generatorRefsRoot(): Uint8Array
  set generatorRefsRoot(value: Uint8Array)
  get aggregatedSignature(): Signature
  set aggregatedSignature(value: Signature)
  get fees(): bigint
  set fees(value: bigint)
  get cost(): bigint
  set cost(value: bigint)
  get rewardClaimsIncorporated(): Array<Coin>
  set rewardClaimsIncorporated(value: Array<Coin>)
}
export declare class RewardChainBlock {
  constructor(weight: bigint, height: number, totalIters: bigint, signagePointIndex: number, posSsCcChallengeHash: Uint8Array, proofOfSpace: ProofOfSpace, challengeChainSpVdf: VdfInfo | undefined | null, challengeChainSpSignature: Signature, challengeChainIpVdf: VdfInfo, rewardChainSpVdf: VdfInfo | undefined | null, rewardChainSpSignature: Signature, rewardChainIpVdf: VdfInfo, infusedChallengeChainIpVdf: VdfInfo | undefined | null, isTransactionBlock: boolean)
  get weight(): bigint
  set weight(value: bigint)
  get height(): number
  set height(value: number)
  get totalIters(): bigint
  set totalIters(value: bigint)
  get signagePointIndex(): number
  set signagePointIndex(value: number)
  get posSsCcChallengeHash(): Uint8Array
  set posSsCcChallengeHash(value: Uint8Array)
  get proofOfSpace(): ProofOfSpace
  set proofOfSpace(value: ProofOfSpace)
  get challengeChainSpVdf(): VdfInfo | null
  set challengeChainSpVdf(value?: VdfInfo | undefined | null)
  get challengeChainSpSignature(): Signature
  set challengeChainSpSignature(value: Signature)
  get challengeChainIpVdf(): VdfInfo
  set challengeChainIpVdf(value: VdfInfo)
  get rewardChainSpVdf(): VdfInfo | null
  set rewardChainSpVdf(value?: VdfInfo | undefined | null)
  get rewardChainSpSignature(): Signature
  set rewardChainSpSignature(value: Signature)
  get rewardChainIpVdf(): VdfInfo
  set rewardChainIpVdf(value: VdfInfo)
  get infusedChallengeChainIpVdf(): VdfInfo | null
  set infusedChallengeChainIpVdf(value?: VdfInfo | undefined | null)
  get isTransactionBlock(): boolean
  set isTransactionBlock(value: boolean)
}
export declare class FoliageTransactionBlock {
  constructor(prevTransactionBlockHash: Uint8Array, timestamp: bigint, filterHash: Uint8Array, additionsRoot: Uint8Array, removalsRoot: Uint8Array, transactionsInfoHash: Uint8Array)
  get prevTransactionBlockHash(): Uint8Array
  set prevTransactionBlockHash(value: Uint8Array)
  get timestamp(): bigint
  set timestamp(value: bigint)
  get filterHash(): Uint8Array
  set filterHash(value: Uint8Array)
  get additionsRoot(): Uint8Array
  set additionsRoot(value: Uint8Array)
  get removalsRoot(): Uint8Array
  set removalsRoot(value: Uint8Array)
  get transactionsInfoHash(): Uint8Array
  set transactionsInfoHash(value: Uint8Array)
}
export declare class FoliageBlockData {
  constructor(unfinishedRewardBlockHash: Uint8Array, poolTarget: PoolTarget, poolSignature: Signature | undefined | null, farmerRewardPuzzleHash: Uint8Array, extensionData: Uint8Array)
  get unfinishedRewardBlockHash(): Uint8Array
  set unfinishedRewardBlockHash(value: Uint8Array)
  get poolTarget(): PoolTarget
  set poolTarget(value: PoolTarget)
  get poolSignature(): Signature | null
  set poolSignature(value?: Signature | undefined | null)
  get farmerRewardPuzzleHash(): Uint8Array
  set farmerRewardPuzzleHash(value: Uint8Array)
  get extensionData(): Uint8Array
  set extensionData(value: Uint8Array)
}
export declare class Foliage {
  constructor(prevBlockHash: Uint8Array, rewardBlockHash: Uint8Array, foliageBlockData: FoliageBlockData, foliageBlockDataSignature: Signature, foliageTransactionBlockHash?: Uint8Array | undefined | null, foliageTransactionBlockSignature?: Signature | undefined | null)
  get prevBlockHash(): Uint8Array
  set prevBlockHash(value: Uint8Array)
  get rewardBlockHash(): Uint8Array
  set rewardBlockHash(value: Uint8Array)
  get foliageBlockData(): FoliageBlockData
  set foliageBlockData(value: FoliageBlockData)
  get foliageBlockDataSignature(): Signature
  set foliageBlockDataSignature(value: Signature)
  get foliageTransactionBlockHash(): Uint8Array | null
  set foliageTransactionBlockHash(value?: Uint8Array | undefined | null)
  get foliageTransactionBlockSignature(): Signature | null
  set foliageTransactionBlockSignature(value?: Signature | undefined | null)
}
export declare class PoolTarget {
  constructor(puzzleHash: Uint8Array, maxHeight: number)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get maxHeight(): number
  set maxHeight(value: number)
}
export declare class BlockRecord {
  constructor(headerHash: Uint8Array, prevHash: Uint8Array, height: number, weight: bigint, totalIters: bigint, signagePointIndex: number, challengeVdfOutput: Uint8Array, infusedChallengeVdfOutput: Uint8Array | undefined | null, rewardInfusionNewChallenge: Uint8Array, challengeBlockInfoHash: Uint8Array, subSlotIters: bigint, poolPuzzleHash: Uint8Array, farmerPuzzleHash: Uint8Array, requiredIters: bigint, deficit: number, overflow: boolean, prevTransactionBlockHeight: number, timestamp?: bigint | undefined | null, prevTransactionBlockHash?: Uint8Array | undefined | null, fees?: bigint | undefined | null, rewardClaimsIncorporated?: Array<Coin> | undefined | null, finishedChallengeSlotHashes?: Array<Uint8Array> | undefined | null, finishedInfusedChallengeSlotHashes?: Array<Uint8Array> | undefined | null, finishedRewardSlotHashes?: Array<Uint8Array> | undefined | null, subEpochSummaryIncluded?: SubEpochSummary | undefined | null)
  get headerHash(): Uint8Array
  set headerHash(value: Uint8Array)
  get prevHash(): Uint8Array
  set prevHash(value: Uint8Array)
  get height(): number
  set height(value: number)
  get weight(): bigint
  set weight(value: bigint)
  get totalIters(): bigint
  set totalIters(value: bigint)
  get signagePointIndex(): number
  set signagePointIndex(value: number)
  get challengeVdfOutput(): Uint8Array
  set challengeVdfOutput(value: Uint8Array)
  get infusedChallengeVdfOutput(): Uint8Array | null
  set infusedChallengeVdfOutput(value?: Uint8Array | undefined | null)
  get rewardInfusionNewChallenge(): Uint8Array
  set rewardInfusionNewChallenge(value: Uint8Array)
  get challengeBlockInfoHash(): Uint8Array
  set challengeBlockInfoHash(value: Uint8Array)
  get subSlotIters(): bigint
  set subSlotIters(value: bigint)
  get poolPuzzleHash(): Uint8Array
  set poolPuzzleHash(value: Uint8Array)
  get farmerPuzzleHash(): Uint8Array
  set farmerPuzzleHash(value: Uint8Array)
  get requiredIters(): bigint
  set requiredIters(value: bigint)
  get deficit(): number
  set deficit(value: number)
  get overflow(): boolean
  set overflow(value: boolean)
  get prevTransactionBlockHeight(): number
  set prevTransactionBlockHeight(value: number)
  get timestamp(): bigint | null
  set timestamp(value?: bigint | undefined | null)
  get prevTransactionBlockHash(): Uint8Array | null
  set prevTransactionBlockHash(value?: Uint8Array | undefined | null)
  get fees(): bigint | null
  set fees(value?: bigint | undefined | null)
  get rewardClaimsIncorporated(): Array<Coin> | null
  set rewardClaimsIncorporated(value?: Array<Coin> | undefined | null)
  get finishedChallengeSlotHashes(): Array<Uint8Array> | null
  set finishedChallengeSlotHashes(value?: Array<Uint8Array> | undefined | null)
  get finishedInfusedChallengeSlotHashes(): Array<Uint8Array> | null
  set finishedInfusedChallengeSlotHashes(value?: Array<Uint8Array> | undefined | null)
  get finishedRewardSlotHashes(): Array<Uint8Array> | null
  set finishedRewardSlotHashes(value?: Array<Uint8Array> | undefined | null)
  get subEpochSummaryIncluded(): SubEpochSummary | null
  set subEpochSummaryIncluded(value?: SubEpochSummary | undefined | null)
}
export declare class ProofOfSpace {
  constructor(challenge: Uint8Array, poolPublicKey: PublicKey | undefined | null, poolContractPuzzleHash: Uint8Array | undefined | null, plotPublicKey: PublicKey, size: number, proof: Uint8Array)
  get challenge(): Uint8Array
  set challenge(value: Uint8Array)
  get poolPublicKey(): PublicKey | null
  set poolPublicKey(value?: PublicKey | undefined | null)
  get poolContractPuzzleHash(): Uint8Array | null
  set poolContractPuzzleHash(value?: Uint8Array | undefined | null)
  get plotPublicKey(): PublicKey
  set plotPublicKey(value: PublicKey)
  get size(): number
  set size(value: number)
  get proof(): Uint8Array
  set proof(value: Uint8Array)
}
export declare class SubEpochSummary {
  constructor(prevSubepochSummaryHash: Uint8Array, rewardChainHash: Uint8Array, numBlocksOverflow: number, newDifficulty?: bigint | undefined | null, newSubSlotIters?: bigint | undefined | null)
  get prevSubepochSummaryHash(): Uint8Array
  set prevSubepochSummaryHash(value: Uint8Array)
  get rewardChainHash(): Uint8Array
  set rewardChainHash(value: Uint8Array)
  get numBlocksOverflow(): number
  set numBlocksOverflow(value: number)
  get newDifficulty(): bigint | null
  set newDifficulty(value?: bigint | undefined | null)
  get newSubSlotIters(): bigint | null
  set newSubSlotIters(value?: bigint | undefined | null)
}
export declare class Remark {
  constructor(rest: Program)
  get rest(): Program
  set rest(value: Program)
}
export declare class AggSigParent {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigPuzzle {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigAmount {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigPuzzleAmount {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigParentAmount {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigParentPuzzle {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigUnsafe {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AggSigMe {
  constructor(publicKey: PublicKey, message: Uint8Array)
  get publicKey(): PublicKey
  set publicKey(value: PublicKey)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class CreateCoin {
  constructor(puzzleHash: Uint8Array, amount: bigint, memos?: Program | undefined | null)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get amount(): bigint
  set amount(value: bigint)
  get memos(): Program | null
  set memos(value?: Program | undefined | null)
}
export declare class ReserveFee {
  constructor(amount: bigint)
  get amount(): bigint
  set amount(value: bigint)
}
export declare class CreateCoinAnnouncement {
  constructor(message: Uint8Array)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class CreatePuzzleAnnouncement {
  constructor(message: Uint8Array)
  get message(): Uint8Array
  set message(value: Uint8Array)
}
export declare class AssertCoinAnnouncement {
  constructor(announcementId: Uint8Array)
  get announcementId(): Uint8Array
  set announcementId(value: Uint8Array)
}
export declare class AssertPuzzleAnnouncement {
  constructor(announcementId: Uint8Array)
  get announcementId(): Uint8Array
  set announcementId(value: Uint8Array)
}
export declare class AssertConcurrentSpend {
  constructor(coinId: Uint8Array)
  get coinId(): Uint8Array
  set coinId(value: Uint8Array)
}
export declare class AssertConcurrentPuzzle {
  constructor(puzzleHash: Uint8Array)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
}
export declare class AssertSecondsRelative {
  constructor(seconds: bigint)
  get seconds(): bigint
  set seconds(value: bigint)
}
export declare class AssertSecondsAbsolute {
  constructor(seconds: bigint)
  get seconds(): bigint
  set seconds(value: bigint)
}
export declare class AssertHeightRelative {
  constructor(height: number)
  get height(): number
  set height(value: number)
}
export declare class AssertHeightAbsolute {
  constructor(height: number)
  get height(): number
  set height(value: number)
}
export declare class AssertBeforeSecondsRelative {
  constructor(seconds: bigint)
  get seconds(): bigint
  set seconds(value: bigint)
}
export declare class AssertBeforeSecondsAbsolute {
  constructor(seconds: bigint)
  get seconds(): bigint
  set seconds(value: bigint)
}
export declare class AssertBeforeHeightRelative {
  constructor(height: number)
  get height(): number
  set height(value: number)
}
export declare class AssertBeforeHeightAbsolute {
  constructor(height: number)
  get height(): number
  set height(value: number)
}
export declare class AssertMyCoinId {
  constructor(coinId: Uint8Array)
  get coinId(): Uint8Array
  set coinId(value: Uint8Array)
}
export declare class AssertMyParentId {
  constructor(parentId: Uint8Array)
  get parentId(): Uint8Array
  set parentId(value: Uint8Array)
}
export declare class AssertMyPuzzleHash {
  constructor(puzzleHash: Uint8Array)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
}
export declare class AssertMyAmount {
  constructor(amount: bigint)
  get amount(): bigint
  set amount(value: bigint)
}
export declare class AssertMyBirthSeconds {
  constructor(seconds: bigint)
  get seconds(): bigint
  set seconds(value: bigint)
}
export declare class AssertMyBirthHeight {
  constructor(height: number)
  get height(): number
  set height(value: number)
}
export declare class AssertEphemeral {
  constructor()
}
export declare class SendMessage {
  constructor(mode: number, message: Uint8Array, data: Array<Program>)
  get mode(): number
  set mode(value: number)
  get message(): Uint8Array
  set message(value: Uint8Array)
  get data(): Array<Program>
  set data(value: Array<Program>)
}
export declare class ReceiveMessage {
  constructor(mode: number, message: Uint8Array, data: Array<Program>)
  get mode(): number
  set mode(value: number)
  get message(): Uint8Array
  set message(value: Uint8Array)
  get data(): Array<Program>
  set data(value: Array<Program>)
}
export declare class Softfork {
  constructor(cost: bigint, rest: Program)
  get cost(): bigint
  set cost(value: bigint)
  get rest(): Program
  set rest(value: Program)
}
export declare class Constants {
  static acsTransferProgram(): Uint8Array
  static acsTransferProgramHash(): Uint8Array
  static augmentedCondition(): Uint8Array
  static augmentedConditionHash(): Uint8Array
  static blockProgramZero(): Uint8Array
  static blockProgramZeroHash(): Uint8Array
  static catPuzzle(): Uint8Array
  static catPuzzleHash(): Uint8Array
  static chialispDeserialisation(): Uint8Array
  static chialispDeserialisationHash(): Uint8Array
  static conditionsWFeeAnnounce(): Uint8Array
  static conditionsWFeeAnnounceHash(): Uint8Array
  static covenantLayer(): Uint8Array
  static covenantLayerHash(): Uint8Array
  static createNftLauncherFromDid(): Uint8Array
  static createNftLauncherFromDidHash(): Uint8Array
  static credentialRestriction(): Uint8Array
  static credentialRestrictionHash(): Uint8Array
  static daoCatEve(): Uint8Array
  static daoCatEveHash(): Uint8Array
  static daoCatLauncher(): Uint8Array
  static daoCatLauncherHash(): Uint8Array
  static daoFinishedState(): Uint8Array
  static daoFinishedStateHash(): Uint8Array
  static daoLockup(): Uint8Array
  static daoLockupHash(): Uint8Array
  static daoProposal(): Uint8Array
  static daoProposalHash(): Uint8Array
  static daoProposalTimer(): Uint8Array
  static daoProposalTimerHash(): Uint8Array
  static daoProposalValidator(): Uint8Array
  static daoProposalValidatorHash(): Uint8Array
  static daoSpendP2Singleton(): Uint8Array
  static daoSpendP2SingletonHash(): Uint8Array
  static daoTreasury(): Uint8Array
  static daoTreasuryHash(): Uint8Array
  static daoUpdateProposal(): Uint8Array
  static daoUpdateProposalHash(): Uint8Array
  static decompressCoinSpendEntry(): Uint8Array
  static decompressCoinSpendEntryHash(): Uint8Array
  static decompressCoinSpendEntryWithPrefix(): Uint8Array
  static decompressCoinSpendEntryWithPrefixHash(): Uint8Array
  static decompressPuzzle(): Uint8Array
  static decompressPuzzleHash(): Uint8Array
  static delegatedTail(): Uint8Array
  static delegatedTailHash(): Uint8Array
  static didInnerpuzzle(): Uint8Array
  static didInnerpuzzleHash(): Uint8Array
  static emlCovenantMorpher(): Uint8Array
  static emlCovenantMorpherHash(): Uint8Array
  static emlTransferProgramCovenantAdapter(): Uint8Array
  static emlTransferProgramCovenantAdapterHash(): Uint8Array
  static emlUpdateMetadataWithDid(): Uint8Array
  static emlUpdateMetadataWithDidHash(): Uint8Array
  static everythingWithSignature(): Uint8Array
  static everythingWithSignatureHash(): Uint8Array
  static exigentMetadataLayer(): Uint8Array
  static exigentMetadataLayerHash(): Uint8Array
  static flagProofsChecker(): Uint8Array
  static flagProofsCheckerHash(): Uint8Array
  static genesisByCoinId(): Uint8Array
  static genesisByCoinIdHash(): Uint8Array
  static genesisByCoinIdOrSingleton(): Uint8Array
  static genesisByCoinIdOrSingletonHash(): Uint8Array
  static genesisByPuzzleHash(): Uint8Array
  static genesisByPuzzleHashHash(): Uint8Array
  static graftrootDlOffers(): Uint8Array
  static graftrootDlOffersHash(): Uint8Array
  static nftIntermediateLauncher(): Uint8Array
  static nftIntermediateLauncherHash(): Uint8Array
  static nftMetadataUpdaterDefault(): Uint8Array
  static nftMetadataUpdaterDefaultHash(): Uint8Array
  static nftMetadataUpdaterUpdateable(): Uint8Array
  static nftMetadataUpdaterUpdateableHash(): Uint8Array
  static nftOwnershipLayer(): Uint8Array
  static nftOwnershipLayerHash(): Uint8Array
  static nftOwnershipTransferProgramOneWayClaimWithRoyalties(): Uint8Array
  static nftOwnershipTransferProgramOneWayClaimWithRoyaltiesHash(): Uint8Array
  static nftStateLayer(): Uint8Array
  static nftStateLayerHash(): Uint8Array
  static notification(): Uint8Array
  static notificationHash(): Uint8Array
  static p21OfN(): Uint8Array
  static p21OfNHash(): Uint8Array
  static p2AnnouncedDelegatedPuzzle(): Uint8Array
  static p2AnnouncedDelegatedPuzzleHash(): Uint8Array
  static p2Conditions(): Uint8Array
  static p2ConditionsHash(): Uint8Array
  static p2DelegatedConditions(): Uint8Array
  static p2DelegatedConditionsHash(): Uint8Array
  static p2DelegatedPuzzle(): Uint8Array
  static p2DelegatedPuzzleHash(): Uint8Array
  static p2DelegatedPuzzleOrHiddenPuzzle(): Uint8Array
  static p2DelegatedPuzzleOrHiddenPuzzleHash(): Uint8Array
  static p2MOfNDelegateDirect(): Uint8Array
  static p2MOfNDelegateDirectHash(): Uint8Array
  static p2Parent(): Uint8Array
  static p2ParentHash(): Uint8Array
  static p2PuzzleHash(): Uint8Array
  static p2PuzzleHashHash(): Uint8Array
  static p2Singleton(): Uint8Array
  static p2SingletonHash(): Uint8Array
  static p2SingletonAggregator(): Uint8Array
  static p2SingletonAggregatorHash(): Uint8Array
  static p2SingletonOrDelayedPuzzleHash(): Uint8Array
  static p2SingletonOrDelayedPuzzleHashHash(): Uint8Array
  static p2SingletonViaDelegatedPuzzle(): Uint8Array
  static p2SingletonViaDelegatedPuzzleHash(): Uint8Array
  static poolMemberInnerpuzzle(): Uint8Array
  static poolMemberInnerpuzzleHash(): Uint8Array
  static poolWaitingroomInnerpuzzle(): Uint8Array
  static poolWaitingroomInnerpuzzleHash(): Uint8Array
  static revocationLayer(): Uint8Array
  static revocationLayerHash(): Uint8Array
  static romBootstrapGenerator(): Uint8Array
  static romBootstrapGeneratorHash(): Uint8Array
  static settlementPayment(): Uint8Array
  static settlementPaymentHash(): Uint8Array
  static singletonLauncher(): Uint8Array
  static singletonLauncherHash(): Uint8Array
  static singletonTopLayer(): Uint8Array
  static singletonTopLayerHash(): Uint8Array
  static singletonTopLayerV11(): Uint8Array
  static singletonTopLayerV11Hash(): Uint8Array
  static standardVcRevocationPuzzle(): Uint8Array
  static standardVcRevocationPuzzleHash(): Uint8Array
  static stdParentMorpher(): Uint8Array
  static stdParentMorpherHash(): Uint8Array
  static optionContract(): Uint8Array
  static optionContractHash(): Uint8Array
  static p2Curried(): Uint8Array
  static p2CurriedHash(): Uint8Array
}
export declare class Mnemonic {
  constructor(mnemonic: string)
  static fromEntropy(entropy: Uint8Array): Mnemonic
  static generate(use24: boolean): Mnemonic
  static verify(mnemonic: string): boolean
  toString(): string
  toEntropy(): Uint8Array
  toSeed(password: string): Uint8Array
}
export declare class Program {
  compile(): Output
  unparse(): string
  serialize(): Uint8Array
  serializeWithBackrefs(): Uint8Array
  run(solution: Program, maxCost: bigint, mempoolMode: boolean): Output
  curry(args: Array<Program>): Program
  uncurry(): CurriedProgram | null
  treeHash(): Uint8Array
  isAtom(): boolean
  isPair(): boolean
  isNull(): boolean
  length(): number
  first(): Program
  rest(): Program
  toInt(): bigint | null
  toString(): string | null
  toBool(): boolean | null
  toAtom(): Uint8Array | null
  toList(): Array<Program> | null
  toPair(): Pair | null
  puzzle(): Puzzle
  parseNftMetadata(): NftMetadata | null
  parseRemark(): Remark | null
  parseAggSigParent(): AggSigParent | null
  parseAggSigPuzzle(): AggSigPuzzle | null
  parseAggSigAmount(): AggSigAmount | null
  parseAggSigPuzzleAmount(): AggSigPuzzleAmount | null
  parseAggSigParentAmount(): AggSigParentAmount | null
  parseAggSigParentPuzzle(): AggSigParentPuzzle | null
  parseAggSigUnsafe(): AggSigUnsafe | null
  parseAggSigMe(): AggSigMe | null
  parseCreateCoin(): CreateCoin | null
  parseReserveFee(): ReserveFee | null
  parseCreateCoinAnnouncement(): CreateCoinAnnouncement | null
  parseCreatePuzzleAnnouncement(): CreatePuzzleAnnouncement | null
  parseAssertCoinAnnouncement(): AssertCoinAnnouncement | null
  parseAssertPuzzleAnnouncement(): AssertPuzzleAnnouncement | null
  parseAssertConcurrentSpend(): AssertConcurrentSpend | null
  parseAssertConcurrentPuzzle(): AssertConcurrentPuzzle | null
  parseAssertSecondsRelative(): AssertSecondsRelative | null
  parseAssertSecondsAbsolute(): AssertSecondsAbsolute | null
  parseAssertHeightRelative(): AssertHeightRelative | null
  parseAssertHeightAbsolute(): AssertHeightAbsolute | null
  parseAssertBeforeSecondsRelative(): AssertBeforeSecondsRelative | null
  parseAssertBeforeSecondsAbsolute(): AssertBeforeSecondsAbsolute | null
  parseAssertBeforeHeightRelative(): AssertBeforeHeightRelative | null
  parseAssertBeforeHeightAbsolute(): AssertBeforeHeightAbsolute | null
  parseAssertMyCoinId(): AssertMyCoinId | null
  parseAssertMyParentId(): AssertMyParentId | null
  parseAssertMyPuzzleHash(): AssertMyPuzzleHash | null
  parseAssertMyAmount(): AssertMyAmount | null
  parseAssertMyBirthSeconds(): AssertMyBirthSeconds | null
  parseAssertMyBirthHeight(): AssertMyBirthHeight | null
  parseAssertEphemeral(): AssertEphemeral | null
  parseSendMessage(): SendMessage | null
  parseReceiveMessage(): ReceiveMessage | null
  parseSoftfork(): Softfork | null
  toBoundCheckedNumber(): number | null
}
export declare class Puzzle {
  parseCat(): ParsedCat | null
  parseChildCats(parentCoin: Coin, parentPuzzle: Program, parentSolution: Program): Array<Cat> | null
  parseNft(): ParsedNft | null
  parseChildNft(parentCoin: Coin, parentPuzzle: Program, parentSolution: Program): Nft | null
  parseDid(): ParsedDid | null
  parseChildDid(parentCoin: Coin, parentPuzzle: Program, parentSolution: Program, coin: Coin): Did | null
  parseInnerStreamingPuzzle(): StreamingPuzzleInfo | null
  parseChildStreamedCat(parentCoin: Coin, parentPuzzle: Program, parentSolution: Program): StreamedCatParsingResult
  constructor(puzzleHash: Uint8Array, program: Program, modHash: Uint8Array, args?: Program | undefined | null)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get program(): Program
  set program(value: Program)
  get modHash(): Uint8Array
  set modHash(value: Uint8Array)
  get args(): Program | null
  set args(value?: Program | undefined | null)
}
export declare class StreamedCatParsingResult {
  constructor(streamedCat: StreamedCat | undefined | null, lastSpendWasClawback: boolean, lastPaymentAmountIfClawback: bigint)
  get streamedCat(): StreamedCat | null
  set streamedCat(value?: StreamedCat | undefined | null)
  get lastSpendWasClawback(): boolean
  set lastSpendWasClawback(value: boolean)
  get lastPaymentAmountIfClawback(): bigint
  set lastPaymentAmountIfClawback(value: bigint)
}
export declare class Cat {
  constructor(coin: Coin, lineageProof: LineageProof | undefined | null, assetId: Uint8Array, p2PuzzleHash: Uint8Array)
  get coin(): Coin
  set coin(value: Coin)
  get lineageProof(): LineageProof | null
  set lineageProof(value?: LineageProof | undefined | null)
  get assetId(): Uint8Array
  set assetId(value: Uint8Array)
  get p2PuzzleHash(): Uint8Array
  set p2PuzzleHash(value: Uint8Array)
}
export declare class CatSpend {
  constructor(cat: Cat, spend: Spend)
  get cat(): Cat
  set cat(value: Cat)
  get spend(): Spend
  set spend(value: Spend)
}
export declare class ParsedCat {
  constructor(assetId: Uint8Array, p2Puzzle: Puzzle)
  get assetId(): Uint8Array
  set assetId(value: Uint8Array)
  get p2Puzzle(): Puzzle
  set p2Puzzle(value: Puzzle)
}
export declare class Nft {
  constructor(coin: Coin, lineageProof: LineageProof, info: NftInfo)
  get coin(): Coin
  set coin(value: Coin)
  get lineageProof(): LineageProof
  set lineageProof(value: LineageProof)
  get info(): NftInfo
  set info(value: NftInfo)
}
export declare class NftInfo {
  constructor(launcherId: Uint8Array, metadata: Program, metadataUpdaterPuzzleHash: Uint8Array, currentOwner: Uint8Array | undefined | null, royaltyPuzzleHash: Uint8Array, royaltyTenThousandths: number, p2PuzzleHash: Uint8Array)
  get launcherId(): Uint8Array
  set launcherId(value: Uint8Array)
  get metadata(): Program
  set metadata(value: Program)
  get metadataUpdaterPuzzleHash(): Uint8Array
  set metadataUpdaterPuzzleHash(value: Uint8Array)
  get currentOwner(): Uint8Array | null
  set currentOwner(value?: Uint8Array | undefined | null)
  get royaltyPuzzleHash(): Uint8Array
  set royaltyPuzzleHash(value: Uint8Array)
  get royaltyTenThousandths(): number
  set royaltyTenThousandths(value: number)
  get p2PuzzleHash(): Uint8Array
  set p2PuzzleHash(value: Uint8Array)
}
export declare class ParsedNft {
  constructor(info: NftInfo, p2Puzzle: Puzzle)
  get info(): NftInfo
  set info(value: NftInfo)
  get p2Puzzle(): Puzzle
  set p2Puzzle(value: Puzzle)
}
export declare class NftMetadata {
  constructor(editionNumber: bigint, editionTotal: bigint, dataUris: Array<string>, dataHash: Uint8Array | undefined | null, metadataUris: Array<string>, metadataHash: Uint8Array | undefined | null, licenseUris: Array<string>, licenseHash?: Uint8Array | undefined | null)
  get editionNumber(): bigint
  set editionNumber(value: bigint)
  get editionTotal(): bigint
  set editionTotal(value: bigint)
  get dataUris(): Array<string>
  set dataUris(value: Array<string>)
  get dataHash(): Uint8Array | null
  set dataHash(value?: Uint8Array | undefined | null)
  get metadataUris(): Array<string>
  set metadataUris(value: Array<string>)
  get metadataHash(): Uint8Array | null
  set metadataHash(value?: Uint8Array | undefined | null)
  get licenseUris(): Array<string>
  set licenseUris(value: Array<string>)
  get licenseHash(): Uint8Array | null
  set licenseHash(value?: Uint8Array | undefined | null)
}
export declare class NftMint {
  constructor(metadata: Program, metadataUpdaterPuzzleHash: Uint8Array, p2PuzzleHash: Uint8Array, royaltyPuzzleHash: Uint8Array, royaltyTenThousandths: number, owner?: DidOwner | undefined | null)
  get metadata(): Program
  set metadata(value: Program)
  get metadataUpdaterPuzzleHash(): Uint8Array
  set metadataUpdaterPuzzleHash(value: Uint8Array)
  get p2PuzzleHash(): Uint8Array
  set p2PuzzleHash(value: Uint8Array)
  get royaltyPuzzleHash(): Uint8Array
  set royaltyPuzzleHash(value: Uint8Array)
  get royaltyTenThousandths(): number
  set royaltyTenThousandths(value: number)
  get owner(): DidOwner | null
  set owner(value?: DidOwner | undefined | null)
}
export declare class DidOwner {
  constructor(didId: Uint8Array, innerPuzzleHash: Uint8Array)
  get didId(): Uint8Array
  set didId(value: Uint8Array)
  get innerPuzzleHash(): Uint8Array
  set innerPuzzleHash(value: Uint8Array)
}
export declare class MintedNfts {
  constructor(nfts: Array<Nft>, parentConditions: Array<Program>)
  get nfts(): Array<Nft>
  set nfts(value: Array<Nft>)
  get parentConditions(): Array<Program>
  set parentConditions(value: Array<Program>)
}
export declare class Did {
  constructor(coin: Coin, lineageProof: LineageProof, info: DidInfo)
  get coin(): Coin
  set coin(value: Coin)
  get lineageProof(): LineageProof
  set lineageProof(value: LineageProof)
  get info(): DidInfo
  set info(value: DidInfo)
}
export declare class DidInfo {
  constructor(launcherId: Uint8Array, recoveryListHash: Uint8Array | undefined | null, numVerificationsRequired: bigint, metadata: Program, p2PuzzleHash: Uint8Array)
  get launcherId(): Uint8Array
  set launcherId(value: Uint8Array)
  get recoveryListHash(): Uint8Array | null
  set recoveryListHash(value?: Uint8Array | undefined | null)
  get numVerificationsRequired(): bigint
  set numVerificationsRequired(value: bigint)
  get metadata(): Program
  set metadata(value: Program)
  get p2PuzzleHash(): Uint8Array
  set p2PuzzleHash(value: Uint8Array)
}
export declare class ParsedDid {
  constructor(info: DidInfo, p2Puzzle: Puzzle)
  get info(): DidInfo
  set info(value: DidInfo)
  get p2Puzzle(): Puzzle
  set p2Puzzle(value: Puzzle)
}
export declare class StreamingPuzzleInfo {
  amountToBePaid(myCoinAmount: bigint, paymentTime: bigint): bigint
  static getHint(recipient: Uint8Array): Uint8Array
  getLaunchHints(): Array<Uint8Array>
  innerPuzzleHash(): Uint8Array
  static fromMemos(memos: Array<Uint8Array>): StreamingPuzzleInfo | null
  constructor(recipient: Uint8Array, clawbackPh: Uint8Array | undefined | null, endTime: bigint, lastPaymentTime: bigint)
  get recipient(): Uint8Array
  set recipient(value: Uint8Array)
  get clawbackPh(): Uint8Array | null
  set clawbackPh(value?: Uint8Array | undefined | null)
  get endTime(): bigint
  set endTime(value: bigint)
  get lastPaymentTime(): bigint
  set lastPaymentTime(value: bigint)
}
export declare class StreamedCat {
  constructor(coin: Coin, assetId: Uint8Array, proof: LineageProof, info: StreamingPuzzleInfo)
  get coin(): Coin
  set coin(value: Coin)
  get assetId(): Uint8Array
  set assetId(value: Uint8Array)
  get proof(): LineageProof
  set proof(value: LineageProof)
  get info(): StreamingPuzzleInfo
  set info(value: StreamingPuzzleInfo)
}
export declare class K1SecretKey {
  static fromBytes(bytes: Uint8Array): K1SecretKey
  toBytes(): Uint8Array
  publicKey(): K1PublicKey
  signPrehashed(prehashed: Uint8Array): K1Signature
}
export declare class K1PublicKey {
  static fromBytes(bytes: Uint8Array): K1PublicKey
  toBytes(): Uint8Array
  fingerprint(): number
  verifyPrehashed(prehashed: Uint8Array, signature: K1Signature): boolean
}
export declare class K1Signature {
  static fromBytes(bytes: Uint8Array): K1Signature
  toBytes(): Uint8Array
}
export declare class R1SecretKey {
  static fromBytes(bytes: Uint8Array): R1SecretKey
  toBytes(): Uint8Array
  publicKey(): R1PublicKey
  signPrehashed(prehashed: Uint8Array): R1Signature
}
export declare class R1PublicKey {
  static fromBytes(bytes: Uint8Array): R1PublicKey
  toBytes(): Uint8Array
  fingerprint(): number
  verifyPrehashed(prehashed: Uint8Array, signature: R1Signature): boolean
}
export declare class R1Signature {
  static fromBytes(bytes: Uint8Array): R1Signature
  toBytes(): Uint8Array
}
export declare class Simulator {
  constructor()
  newCoin(puzzleHash: Uint8Array, amount: bigint): Coin
  bls(amount: bigint): BlsPairWithCoin
  spendCoins(coinSpends: Array<CoinSpend>, secretKeys: Array<SecretKey>): void
}
export declare class BlsPair {
  static fromSeed(seed: bigint): BlsPair
  static manyFromSeed(seed: bigint, count: number): Array<BlsPair>
  constructor(sk: SecretKey, pk: PublicKey)
  get sk(): SecretKey
  set sk(value: SecretKey)
  get pk(): PublicKey
  set pk(value: PublicKey)
}
export declare class BlsPairWithCoin {
  constructor(sk: SecretKey, pk: PublicKey, puzzleHash: Uint8Array, coin: Coin)
  get sk(): SecretKey
  set sk(value: SecretKey)
  get pk(): PublicKey
  set pk(value: PublicKey)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
  get coin(): Coin
  set coin(value: Coin)
}
export declare class K1Pair {
  static fromSeed(seed: bigint): K1Pair
  static manyFromSeed(seed: bigint, count: number): Array<K1Pair>
  constructor(sk: K1SecretKey, pk: K1PublicKey)
  get sk(): K1SecretKey
  set sk(value: K1SecretKey)
  get pk(): K1PublicKey
  set pk(value: K1PublicKey)
}
export declare class R1Pair {
  static fromSeed(seed: bigint): R1Pair
  static manyFromSeed(seed: bigint, count: number): Array<R1Pair>
  constructor(sk: R1SecretKey, pk: R1PublicKey)
  get sk(): R1SecretKey
  set sk(value: R1SecretKey)
  get pk(): R1PublicKey
  set pk(value: R1PublicKey)
}
export declare class Vault {
  child(custodyHash: Uint8Array): Vault
  constructor(coin: Coin, launcherId: Uint8Array, proof: LineageProof, custodyHash: Uint8Array)
  get coin(): Coin
  set coin(value: Coin)
  get launcherId(): Uint8Array
  set launcherId(value: Uint8Array)
  get proof(): LineageProof
  set proof(value: LineageProof)
  get custodyHash(): Uint8Array
  set custodyHash(value: Uint8Array)
}
export declare class MemberConfig {
  constructor()
  withTopLevel(topLevel: boolean): MemberConfig
  withNonce(nonce: number): MemberConfig
  withRestrictions(restrictions: Array<Restriction>): MemberConfig
  get topLevel(): boolean
  set topLevel(value: boolean)
  get nonce(): number
  set nonce(value: number)
  get restrictions(): Array<Restriction>
  set restrictions(value: Array<Restriction>)
}
export declare class Restriction {
  constructor(kind: RestrictionKind, puzzleHash: Uint8Array)
  get kind(): RestrictionKind
  set kind(value: RestrictionKind)
  get puzzleHash(): Uint8Array
  set puzzleHash(value: Uint8Array)
}
export declare class MipsSpend {
  spend(custodyHash: Uint8Array): Spend
  spendVault(vault: Vault): void
  mOfN(config: MemberConfig, required: number, items: Array<Uint8Array>): void
  k1Member(config: MemberConfig, publicKey: K1PublicKey, signature: K1Signature, fastForward: boolean): void
  r1Member(config: MemberConfig, publicKey: R1PublicKey, signature: R1Signature, fastForward: boolean): void
  blsMember(config: MemberConfig, publicKey: PublicKey): void
  passkeyMember(config: MemberConfig, publicKey: R1PublicKey, signature: R1Signature, authenticatorData: Uint8Array, clientDataJson: Uint8Array, challengeIndex: number, fastForward: boolean): void
  singletonMember(config: MemberConfig, launcherId: Uint8Array, singletonInnerPuzzleHash: Uint8Array, singletonAmount: bigint): void
  fixedPuzzleMember(config: MemberConfig, fixedPuzzleHash: Uint8Array): void
  customMember(config: MemberConfig, spend: Spend): void
  timelock(timelock: bigint): void
  force1Of2RestrictedVariable(leftSideSubtreeHash: Uint8Array, nonce: number, memberValidatorListHash: Uint8Array, delegatedPuzzleValidatorListHash: Uint8Array, newRightSideMemberHash: Uint8Array): void
  preventConditionOpcode(conditionOpcode: number): void
  preventMultipleCreateCoins(): void
  preventVaultSideEffects(): void
}
export declare class VaultMint {
  constructor(vault: Vault, parentConditions: Array<Program>)
  get vault(): Vault
  set vault(value: Vault)
  get parentConditions(): Array<Program>
  set parentConditions(value: Array<Program>)
}
